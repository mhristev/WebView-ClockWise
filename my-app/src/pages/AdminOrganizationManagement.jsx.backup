import React, { useState, useEffect } from "react";
import { useAuth } from "../auth/AuthContext";
import { ORGANIZATION_BASE_URL } from "../config/api";
import {
  Building2,
  Plus,
  Search,
  AlertCircle,
  Loader2,
  CheckCircle,
  X,
  Edit3,
  Save,
  Trash2,
  Filter,
  MapPin,
  Building,
  FileText,
} from "lucide-react";

const AdminOrganizationManagement = () => {
  const { user, getAuthHeaders } = useAuth();
  const [companies, setCompanies] = useState([]);
  const [businessUnits, setBusinessUnits] = useState([]);
  const [filteredCompanies, setFilteredCompanies] = useState([]);
  const [filteredBusinessUnits, setFilteredBusinessUnits] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [successMessage, setSuccessMessage] = useState(null);

  // Search and filters
  const [companySearchTerm, setCompanySearchTerm] = useState("");
  const [businessUnitSearchTerm, setBusinessUnitSearchTerm] = useState("");
  const [selectedCompanyFilter, setSelectedCompanyFilter] = useState("");

  // Modal states
  const [showCompanyModal, setShowCompanyModal] = useState(false);
  const [showBusinessUnitModal, setShowBusinessUnitModal] = useState(false);
  const [editingCompany, setEditingCompany] = useState(null);
  const [editingBusinessUnit, setEditingBusinessUnit] = useState(null);
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Form states
  const [companyForm, setCompanyForm] = useState({
    name: "",
    description: "",
  });

  const [businessUnitForm, setBusinessUnitForm] = useState({
    name: "",
    location: "",
    description: "",
    companyId: "",
  });

  // Auto-dismiss messages
  useEffect(() => {
    if (successMessage) {
      const timer = setTimeout(() => setSuccessMessage(null), 5000);
      return () => clearTimeout(timer);
    }
  }, [successMessage]);

  useEffect(() => {
    if (error) {
      const timer = setTimeout(() => setError(null), 10000);
      return () => clearTimeout(timer);
    }
  }, [error]);

  // Initial data load
  useEffect(() => {
    loadData();
  }, []);

  // Update business units when companies change
  useEffect(() => {
    if (companies.length > 0 && businessUnits.length > 0) {
      const enrichedBusinessUnits = businessUnits.map((bu) => {
        const company = companies.find((c) => c.id === bu.companyId);
        return {
          ...bu,
          companyName: company ? company.name : "Unknown Company",
        };
      });
      // Only update if the company names actually changed to avoid infinite loops
      const hasChanges = enrichedBusinessUnits.some(
        (enriched, index) =>
          enriched.companyName !== businessUnits[index]?.companyName
      );

      if (hasChanges) {
        setFilteredBusinessUnits(enrichedBusinessUnits);
      }
    }
  }, [companies, businessUnits]);

  // Apply company filters
  useEffect(() => {
    let filtered = companies;

    if (companySearchTerm) {
      filtered = filtered.filter(
        (company) =>
          company.name
            .toLowerCase()
            .includes(companySearchTerm.toLowerCase()) ||
          company.description
            .toLowerCase()
            .includes(companySearchTerm.toLowerCase())
      );
    }

    setFilteredCompanies(filtered);
  }, [companies, companySearchTerm]);

  // Apply business unit filters
  useEffect(() => {
    let filtered = businessUnits;

    if (businessUnitSearchTerm) {
      filtered = filtered.filter(
        (bu) =>
          bu.name
            .toLowerCase()
            .includes(businessUnitSearchTerm.toLowerCase()) ||
          bu.location
            .toLowerCase()
            .includes(businessUnitSearchTerm.toLowerCase()) ||
          bu.description
            .toLowerCase()
            .includes(businessUnitSearchTerm.toLowerCase()) ||
          (bu.companyName &&
            bu.companyName
              .toLowerCase()
              .includes(businessUnitSearchTerm.toLowerCase()))
      );
    }

    if (selectedCompanyFilter) {
      filtered = filtered.filter(
        (bu) => bu.companyId === selectedCompanyFilter
      );
    }

    setFilteredBusinessUnits(filtered);
  }, [businessUnits, businessUnitSearchTerm, selectedCompanyFilter]);

  // Check admin access
  if (user?.role !== "ADMIN") {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <AlertCircle className="mx-auto h-12 w-12 text-red-400 mb-4" />
          <h3 className="text-lg font-medium text-gray-900">Access Denied</h3>
          <p className="text-gray-500">
            You need administrator privileges to access this page.
          </p>
        </div>
      </div>
    );
  }

  // Validation helpers
  const isFieldEmpty = (value) => !value || !value.toString().trim();

  const hasCompanyValidationErrors = () => {
    return (
      isFieldEmpty(companyForm.name) || isFieldEmpty(companyForm.description)
    );
  };

  const hasBusinessUnitValidationErrors = () => {
    return (
      isFieldEmpty(businessUnitForm.name) ||
      isFieldEmpty(businessUnitForm.location) ||
      isFieldEmpty(businessUnitForm.description) ||
      isFieldEmpty(businessUnitForm.companyId)
    );
  };

  const fetchCompanies = async () => {
    try {
      const response = await fetch(`${ORGANIZATION_BASE_URL}/companies`, {
        method: "GET",
        headers: getAuthHeaders(),
      });

      if (response.status === 401) {
        setError("Session expired. Please log in again.");
        return;
      }

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log("Companies data:", data);

      // Handle Flow response from backend
      const companiesArray = Array.isArray(data) ? data : [];
      setCompanies(companiesArray);
      setFilteredCompanies(companiesArray);
    } catch (error) {
      console.error("Error fetching companies:", error);
      setError(`Failed to load companies: ${error.message}`);
      setCompanies([]);
      setFilteredCompanies([]);
    }
  };

  // Helper function to enrich business units with company names
  const enrichBusinessUnitsWithCompanyNames = (
    businessUnitsArray,
    companiesArray
  ) => {
    return businessUnitsArray.map((bu) => {
      const company = companiesArray.find((c) => c.id === bu.companyId);
      return {
        ...bu,
        companyName: company ? company.name : "Unknown Company",
      };
    });
  };

  const fetchBusinessUnits = async () => {
    try {
      const response = await fetch(`${ORGANIZATION_BASE_URL}/business-units`, {
        method: "GET",
        headers: getAuthHeaders(),
      });

      if (response.status === 401) {
        setError("Session expired. Please log in again.");
        return;
      }

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log("Business units data:", data);

      // Handle Flow response from backend
      const businessUnitsArray = Array.isArray(data) ? data : [];

      // Enrich with company names using current companies
      const enrichedBusinessUnits = enrichBusinessUnitsWithCompanyNames(
        businessUnitsArray,
        companies
      );

      setBusinessUnits(enrichedBusinessUnits);
      setFilteredBusinessUnits(enrichedBusinessUnits);
    } catch (error) {
      console.error("Error fetching business units:", error);
      setError(`Failed to load business units: ${error.message}`);
      setBusinessUnits([]);
      setFilteredBusinessUnits([]);
    }
  };

  const loadData = async () => {
    setIsLoading(true);
    setError(null);

    try {
      // Load companies first
      await fetchCompanies();
      // Then load business units (they will be enriched automatically)
      await fetchBusinessUnits();
    } catch (error) {
      console.error("Error loading data:", error);
      setError("Failed to load organization data");
    } finally {
      setIsLoading(false);
    }
  };

  // Company CRUD operations
  const handleCreateCompany = () => {
    setEditingCompany(null);
    setCompanyForm({ name: "", description: "" });
    setShowCompanyModal(true);
  };

  const handleEditCompany = (company) => {
    setEditingCompany(company);
    setCompanyForm({
      name: company.name,
      description: company.description,
    });
    setShowCompanyModal(true);
  };

  const handleSaveCompany = async () => {
    if (hasCompanyValidationErrors()) {
      setError("Please fill in all required fields for the company.");
      return;
    }

    setIsSubmitting(true);
    setError(null);

    try {
      const url = editingCompany
        ? `${ORGANIZATION_BASE_URL}/companies/${editingCompany.id}`
        : `${ORGANIZATION_BASE_URL}/companies`;

      const method = editingCompany ? "PUT" : "POST";

      const body = editingCompany
        ? { ...companyForm, id: editingCompany.id }
        : companyForm;

      const response = await fetch(url, {
        method,
        headers: {
          ...getAuthHeaders(),
          "Content-Type": "application/json",
        },
        body: JSON.stringify(body),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      setSuccessMessage(
        editingCompany
          ? "Company updated successfully!"
          : "Company created successfully!"
      );
      setShowCompanyModal(false);
      await loadData();
    } catch (error) {
      console.error("Error saving company:", error);
      setError(
        `Failed to ${editingCompany ? "update" : "create"} company: ${
          error.message
        }`
      );
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleDeleteCompany = async (company) => {
    if (
      !window.confirm(
        `Are you sure you want to delete "${company.name}"? This action cannot be undone.`
      )
    ) {
      return;
    }

    setIsSubmitting(true);
    setError(null);

    try {
      const response = await fetch(
        `${ORGANIZATION_BASE_URL}/companies/${company.id}`,
        {
          method: "DELETE",
          headers: getAuthHeaders(),
        }
      );

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      setSuccessMessage("Company deleted successfully!");
      await loadData();
    } catch (error) {
      console.error("Error deleting company:", error);
      setError(`Failed to delete company: ${error.message}`);
    } finally {
      setIsSubmitting(false);
    }
  };

  // Business Unit CRUD operations
  const handleCreateBusinessUnit = () => {
    setEditingBusinessUnit(null);
    setBusinessUnitForm({
      name: "",
      location: "",
      description: "",
      companyId: "",
    });
    setShowBusinessUnitModal(true);
  };

  const handleEditBusinessUnit = (businessUnit) => {
    setEditingBusinessUnit(businessUnit);
    setBusinessUnitForm({
      name: businessUnit.name,
      location: businessUnit.location,
      description: businessUnit.description,
      companyId: businessUnit.companyId,
    });
    setShowBusinessUnitModal(true);
  };

  const handleSaveBusinessUnit = async () => {
    if (hasBusinessUnitValidationErrors()) {
      setError("Please fill in all required fields for the business unit.");
      return;
    }

    setIsSubmitting(true);
    setError(null);

    try {
      const url = editingBusinessUnit
        ? `${ORGANIZATION_BASE_URL}/business-units/${editingBusinessUnit.id}`
        : `${ORGANIZATION_BASE_URL}/business-units`;

      const method = editingBusinessUnit ? "PUT" : "POST";

      const body = editingBusinessUnit
        ? { ...businessUnitForm, id: editingBusinessUnit.id }
        : businessUnitForm;

      const response = await fetch(url, {
        method,
        headers: {
          ...getAuthHeaders(),
          "Content-Type": "application/json",
        },
        body: JSON.stringify(body),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      setSuccessMessage(
        editingBusinessUnit
          ? "Business unit updated successfully!"
          : "Business unit created successfully!"
      );
      setShowBusinessUnitModal(false);
      await loadData();
    } catch (error) {
      console.error("Error saving business unit:", error);
      setError(
        `Failed to ${
          editingBusinessUnit ? "update" : "create"
        } business unit: ${error.message}`
      );
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleDeleteBusinessUnit = async (businessUnit) => {
    if (
      !window.confirm(
        `Are you sure you want to delete "${businessUnit.name}"? This action cannot be undone.`
      )
    ) {
      return;
    }

    setIsSubmitting(true);
    setError(null);

    try {
      const response = await fetch(
        `${ORGANIZATION_BASE_URL}/business-units/${businessUnit.id}`,
        {
          method: "DELETE",
          headers: getAuthHeaders(),
        }
      );

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      setSuccessMessage("Business unit deleted successfully!");
      await loadData();
    } catch (error) {
      console.error("Error deleting business unit:", error);
      setError(`Failed to delete business unit: ${error.message}`);
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleCloseCompanyModal = () => {
    setShowCompanyModal(false);
    setEditingCompany(null);
    setCompanyForm({ name: "", description: "" });
  };

  const handleCloseBusinessUnitModal = () => {
    setShowBusinessUnitModal(false);
    setEditingBusinessUnit(null);
    setBusinessUnitForm({
      name: "",
      location: "",
      description: "",
      companyId: "",
    });
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <Loader2 className="animate-spin h-8 w-8 text-blue-500" />
        <span className="ml-2 text-gray-600">Loading organization data...</span>
      </div>
    );
  }

  return (
    <div className="p-6 bg-gray-50 min-h-screen">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center mb-4">
            <Building2 className="h-8 w-8 text-blue-600 mr-3" />
            <h1 className="text-3xl font-bold text-gray-900">
              Organization Management
            </h1>
          </div>
          <p className="text-gray-600">
            Manage companies and their business units in the system.
          </p>
        </div>

        {/* Messages */}
        {error && (
          <div className="mb-4 bg-red-50 border border-red-200 rounded-md p-4 flex items-center">
            <AlertCircle className="h-5 w-5 text-red-400 mr-3" />
            <span className="text-red-700">{error}</span>
          </div>
        )}

        {successMessage && (
          <div className="mb-4 bg-green-50 border border-green-200 rounded-md p-4 flex items-center">
            <CheckCircle className="h-5 w-5 text-green-400 mr-3" />
            <span className="text-green-700">{successMessage}</span>
          </div>
        )}

        {/* Companies Section */}
        <div className="bg-white rounded-lg shadow mb-8">
          <div className="p-6 border-b border-gray-200">
            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
              <div>
                <h2 className="text-xl font-semibold text-gray-900 flex items-center">
                  <Building className="h-5 w-5 mr-2" />
                  Companies
                </h2>
                <p className="text-gray-600 text-sm">
                  Manage organizations in the system
                </p>
              </div>
              <button
                onClick={handleCreateCompany}
                className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 flex items-center"
              >
                <Plus className="h-4 w-4 mr-2" />
                Add Company
              </button>
            </div>

            {/* Company Search */}
            <div className="mt-4">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                <input
                  type="text"
                  placeholder="Search companies by name or description..."
                  value={companySearchTerm}
                  onChange={(e) => setCompanySearchTerm(e.target.value)}
                  className="pl-10 pr-4 py-2 w-full border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
            </div>
          </div>

          {/* Companies List */}
          <div className="p-6">
            {filteredCompanies.length === 0 ? (
              <div className="text-center py-8">
                <Building className="mx-auto h-12 w-12 text-gray-400 mb-4" />
                <p className="text-gray-500">
                  {companySearchTerm
                    ? "No companies match your search."
                    : "No companies found."}
                </p>
              </div>
            ) : (
              <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                {filteredCompanies.map((company) => (
                  <div
                    key={company.id}
                    className="border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow"
                  >
                    <div className="flex items-start justify-between mb-3">
                      <h3 className="text-lg font-medium text-gray-900">
                        {company.name}
                      </h3>
                      <div className="flex space-x-2">
                        <button
                          onClick={() => handleEditCompany(company)}
                          className="text-blue-600 hover:text-blue-800"
                        >
                          <Edit3 className="h-4 w-4" />
                        </button>
                        <button
                          onClick={() => handleDeleteCompany(company)}
                          className="text-red-600 hover:text-red-800"
                        >
                          <Trash2 className="h-4 w-4" />
                        </button>
                      </div>
                    </div>
                    <p className="text-gray-600 text-sm mb-3">
                      {company.description}
                    </p>
                    <div className="text-xs text-gray-500">
                      Business Units:{" "}
                      {
                        businessUnits.filter(
                          (bu) => bu.companyId === company.id
                        ).length
                      }
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>

        {/* Business Units Section */}
        <div className="bg-white rounded-lg shadow">
          <div className="p-6 border-b border-gray-200">
            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
              <div>
                <h2 className="text-xl font-semibold text-gray-900 flex items-center">
                  <Building2 className="h-5 w-5 mr-2" />
                  Business Units
                </h2>
                <p className="text-gray-600 text-sm">
                  Manage business units within companies
                </p>
              </div>
              <button
                onClick={handleCreateBusinessUnit}
                className="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 flex items-center"
              >
                <Plus className="h-4 w-4 mr-2" />
                Add Business Unit
              </button>
            </div>

            {/* Business Unit Search and Filter */}
            <div className="mt-4 flex flex-col sm:flex-row gap-4">
              <div className="relative flex-1">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                <input
                  type="text"
                  placeholder="Search business units..."
                  value={businessUnitSearchTerm}
                  onChange={(e) => setBusinessUnitSearchTerm(e.target.value)}
                  className="pl-10 pr-4 py-2 w-full border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
              <div className="relative">
                <Filter className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                <select
                  value={selectedCompanyFilter}
                  onChange={(e) => setSelectedCompanyFilter(e.target.value)}
                  className="pl-10 pr-8 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                >
                  <option value="">All Companies</option>
                  {companies.map((company) => (
                    <option key={company.id} value={company.id}>
                      {company.name}
                    </option>
                  ))}
                </select>
              </div>
            </div>
          </div>

          {/* Business Units List */}
          <div className="p-6">
            {filteredBusinessUnits.length === 0 ? (
              <div className="text-center py-8">
                <Building2 className="mx-auto h-12 w-12 text-gray-400 mb-4" />
                <p className="text-gray-500">
                  {businessUnitSearchTerm || selectedCompanyFilter
                    ? "No business units match your filters."
                    : "No business units found."}
                </p>
              </div>
            ) : (
              <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                {filteredBusinessUnits.map((businessUnit) => (
                  <div
                    key={businessUnit.id}
                    className="border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow"
                  >
                    <div className="flex items-start justify-between mb-3">
                      <h3 className="text-lg font-medium text-gray-900">
                        {businessUnit.name}
                      </h3>
                      <div className="flex space-x-2">
                        <button
                          onClick={() => handleEditBusinessUnit(businessUnit)}
                          className="text-blue-600 hover:text-blue-800"
                        >
                          <Edit3 className="h-4 w-4" />
                        </button>
                        <button
                          onClick={() => handleDeleteBusinessUnit(businessUnit)}
                          className="text-red-600 hover:text-red-800"
                        >
                          <Trash2 className="h-4 w-4" />
                        </button>
                      </div>
                    </div>

                    <div className="space-y-2 mb-3">
                      <div className="flex items-center text-sm text-gray-600">
                        <MapPin className="h-4 w-4 mr-2" />
                        {businessUnit.location}
                      </div>
                      <div className="flex items-center text-sm text-gray-600">
                        <Building className="h-4 w-4 mr-2" />
                        {businessUnit.companyName}
                      </div>
                    </div>

                    <p className="text-gray-600 text-sm">
                      {businessUnit.description}
                    </p>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Company Modal */}
      {showCompanyModal && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
          <div className="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
            <div className="mt-3">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-medium text-gray-900 flex items-center">
                  <Building className="h-5 w-5 mr-2" />
                  {editingCompany ? "Edit Company" : "Create Company"}
                </h3>
                <button
                  onClick={handleCloseCompanyModal}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <X className="h-5 w-5" />
                </button>
              </div>

              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Company Name *
                  </label>
                  <input
                    type="text"
                    value={companyForm.name}
                    onChange={(e) =>
                      setCompanyForm({ ...companyForm, name: e.target.value })
                    }
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    placeholder="Enter company name"
                  />
                  {isFieldEmpty(companyForm.name) && (
                    <p className="text-red-500 text-xs mt-1">
                      Company name is required
                    </p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Description *
                  </label>
                  <textarea
                    value={companyForm.description}
                    onChange={(e) =>
                      setCompanyForm({
                        ...companyForm,
                        description: e.target.value,
                      })
                    }
                    rows={3}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    placeholder="Enter company description"
                  />
                  {isFieldEmpty(companyForm.description) && (
                    <p className="text-red-500 text-xs mt-1">
                      Description is required
                    </p>
                  )}
                </div>
              </div>

              <div className="flex space-x-3 mt-6">
                <button
                  onClick={handleSaveCompany}
                  disabled={isSubmitting || hasCompanyValidationErrors()}
                  className="flex-1 bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed flex items-center justify-center"
                >
                  {isSubmitting ? (
                    <Loader2 className="animate-spin h-4 w-4 mr-2" />
                  ) : (
                    <Save className="h-4 w-4 mr-2" />
                  )}
                  {editingCompany ? "Update" : "Create"}
                </button>
                <button
                  onClick={handleCloseCompanyModal}
                  className="flex-1 bg-gray-300 text-gray-700 px-4 py-2 rounded-md hover:bg-gray-400"
                >
                  Cancel
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Business Unit Modal */}
      {showBusinessUnitModal && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
          <div className="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
            <div className="mt-3">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-medium text-gray-900 flex items-center">
                  <Building2 className="h-5 w-5 mr-2" />
                  {editingBusinessUnit
                    ? "Edit Business Unit"
                    : "Create Business Unit"}
                </h3>
                <button
                  onClick={handleCloseBusinessUnitModal}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <X className="h-5 w-5" />
                </button>
              </div>

              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Business Unit Name *
                  </label>
                  <input
                    type="text"
                    value={businessUnitForm.name}
                    onChange={(e) =>
                      setBusinessUnitForm({
                        ...businessUnitForm,
                        name: e.target.value,
                      })
                    }
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    placeholder="Enter business unit name"
                  />
                  {isFieldEmpty(businessUnitForm.name) && (
                    <p className="text-red-500 text-xs mt-1">
                      Business unit name is required
                    </p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Location *
                  </label>
                  <input
                    type="text"
                    value={businessUnitForm.location}
                    onChange={(e) =>
                      setBusinessUnitForm({
                        ...businessUnitForm,
                        location: e.target.value,
                      })
                    }
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    placeholder="Enter location"
                  />
                  {isFieldEmpty(businessUnitForm.location) && (
                    <p className="text-red-500 text-xs mt-1">
                      Location is required
                    </p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Company *
                  </label>
                  <select
                    value={businessUnitForm.companyId}
                    onChange={(e) =>
                      setBusinessUnitForm({
                        ...businessUnitForm,
                        companyId: e.target.value,
                      })
                    }
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  >
                    <option value="">Select a company</option>
                    {companies.map((company) => (
                      <option key={company.id} value={company.id}>
                        {company.name}
                      </option>
                    ))}
                  </select>
                  {isFieldEmpty(businessUnitForm.companyId) && (
                    <p className="text-red-500 text-xs mt-1">
                      Company selection is required
                    </p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Description *
                  </label>
                  <textarea
                    value={businessUnitForm.description}
                    onChange={(e) =>
                      setBusinessUnitForm({
                        ...businessUnitForm,
                        description: e.target.value,
                      })
                    }
                    rows={3}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    placeholder="Enter business unit description"
                  />
                  {isFieldEmpty(businessUnitForm.description) && (
                    <p className="text-red-500 text-xs mt-1">
                      Description is required
                    </p>
                  )}
                </div>
              </div>

              <div className="flex space-x-3 mt-6">
                <button
                  onClick={handleSaveBusinessUnit}
                  disabled={isSubmitting || hasBusinessUnitValidationErrors()}
                  className="flex-1 bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 disabled:bg-gray-400 disabled:cursor-not-allowed flex items-center justify-center"
                >
                  {isSubmitting ? (
                    <Loader2 className="animate-spin h-4 w-4 mr-2" />
                  ) : (
                    <Save className="h-4 w-4 mr-2" />
                  )}
                  {editingBusinessUnit ? "Update" : "Create"}
                </button>
                <button
                  onClick={handleCloseBusinessUnitModal}
                  className="flex-1 bg-gray-300 text-gray-700 px-4 py-2 rounded-md hover:bg-gray-400"
                >
                  Cancel
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default AdminOrganizationManagement;
